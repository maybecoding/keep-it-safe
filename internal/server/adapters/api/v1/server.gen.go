//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240427135415-621b44626ac9 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/maybecoding/keep-it-safe/internal/server/adapters/api/v1/models"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login user
	// (POST /login)
	Login(w http.ResponseWriter, r *http.Request)
	// Register new user
	// (POST /register)
	Register(w http.ResponseWriter, r *http.Request)
	// Get list of secrets of user
	// (GET /secrets)
	SecretList(w http.ResponseWriter, r *http.Request, params SecretListParams)
	// Creates new secret of user
	// (POST /secrets)
	SecretSet(w http.ResponseWriter, r *http.Request, params SecretSetParams)
	// Get secret by id
	// (GET /secrets/{secret_id})
	SecretGetByID(w http.ResponseWriter, r *http.Request, secretId int32, params SecretGetByIDParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Register(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SecretList operation middleware
func (siw *ServerInterfaceWrapper) SecretList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SecretListParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("Authorization"); err == nil {
		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}
		params.Authorization = value

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "Authorization"})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SecretList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SecretSet operation middleware
func (siw *ServerInterfaceWrapper) SecretSet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SecretSetParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("Authorization"); err == nil {
		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}
		params.Authorization = value

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "Authorization"})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SecretSet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SecretGetByID operation middleware
func (siw *ServerInterfaceWrapper) SecretGetByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "secret_id" -------------
	var secretId int32

	err = runtime.BindStyledParameterWithOptions("simple", "secret_id", r.PathValue("secret_id"), &secretId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "secret_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SecretGetByIDParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("Authorization"); err == nil {
		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}
		params.Authorization = value

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "Authorization"})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SecretGetByID(w, r, secretId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/login", wrapper.Login)
	m.HandleFunc("POST "+options.BaseURL+"/register", wrapper.Register)
	m.HandleFunc("GET "+options.BaseURL+"/secrets", wrapper.SecretList)
	m.HandleFunc("POST "+options.BaseURL+"/secrets", wrapper.SecretSet)
	m.HandleFunc("GET "+options.BaseURL+"/secrets/{secret_id}", wrapper.SecretGetByID)

	return m
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200Response struct {
	Headers Login200ResponseHeaders
}

func (response Login200Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type Login400Response struct {
}

func (response Login400Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Login401JSONResponse Error

func (response Login401JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Login500JSONResponse Error

func (response Login500JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RegisterRequestObject struct {
	Body *RegisterJSONRequestBody
}

type RegisterResponseObject interface {
	VisitRegisterResponse(w http.ResponseWriter) error
}

type Register200ResponseHeaders struct {
	SetCookie string
}

type Register200Response struct {
	Headers Register200ResponseHeaders
}

func (response Register200Response) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type Register400Response struct {
}

func (response Register400Response) VisitRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Register409Response struct {
}

func (response Register409Response) VisitRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type Register500Response struct {
}

func (response Register500Response) VisitRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type SecretListRequestObject struct {
	Params SecretListParams
}

type SecretListResponseObject interface {
	VisitSecretListResponse(w http.ResponseWriter) error
}

type SecretList200JSONResponse Secrets

func (response SecretList200JSONResponse) VisitSecretListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SecretList401JSONResponse Error

func (response SecretList401JSONResponse) VisitSecretListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SecretList500JSONResponse Error

func (response SecretList500JSONResponse) VisitSecretListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SecretSetRequestObject struct {
	Params SecretSetParams
	Body   *SecretSetJSONRequestBody
}

type SecretSetResponseObject interface {
	VisitSecretSetResponse(w http.ResponseWriter) error
}

type SecretSet200Response struct {
}

func (response SecretSet200Response) VisitSecretSetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SecretSet400Response struct {
}

func (response SecretSet400Response) VisitSecretSetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SecretSet401JSONResponse Error

func (response SecretSet401JSONResponse) VisitSecretSetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SecretSet500JSONResponse Error

func (response SecretSet500JSONResponse) VisitSecretSetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SecretGetByIDRequestObject struct {
	SecretId int32 `json:"secret_id"`
	Params   SecretGetByIDParams
}

type SecretGetByIDResponseObject interface {
	VisitSecretGetByIDResponse(w http.ResponseWriter) error
}

type SecretGetByID200JSONResponse Data

func (response SecretGetByID200JSONResponse) VisitSecretGetByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SecretGetByID401JSONResponse Error

func (response SecretGetByID401JSONResponse) VisitSecretGetByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SecretGetByID404Response struct {
}

func (response SecretGetByID404Response) VisitSecretGetByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SecretGetByID500JSONResponse Error

func (response SecretGetByID500JSONResponse) VisitSecretGetByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Login user
	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Register new user
	// (POST /register)
	Register(ctx context.Context, request RegisterRequestObject) (RegisterResponseObject, error)
	// Get list of secrets of user
	// (GET /secrets)
	SecretList(ctx context.Context, request SecretListRequestObject) (SecretListResponseObject, error)
	// Creates new secret of user
	// (POST /secrets)
	SecretSet(ctx context.Context, request SecretSetRequestObject) (SecretSetResponseObject, error)
	// Get secret by id
	// (GET /secrets/{secret_id})
	SecretGetByID(ctx context.Context, request SecretGetByIDRequestObject) (SecretGetByIDResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Login operation middleware
func (sh *strictHandler) Login(w http.ResponseWriter, r *http.Request) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Register operation middleware
func (sh *strictHandler) Register(w http.ResponseWriter, r *http.Request) {
	var request RegisterRequestObject

	var body RegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Register(ctx, request.(RegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Register")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterResponseObject); ok {
		if err := validResponse.VisitRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SecretList operation middleware
func (sh *strictHandler) SecretList(w http.ResponseWriter, r *http.Request, params SecretListParams) {
	var request SecretListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SecretList(ctx, request.(SecretListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SecretList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SecretListResponseObject); ok {
		if err := validResponse.VisitSecretListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SecretSet operation middleware
func (sh *strictHandler) SecretSet(w http.ResponseWriter, r *http.Request, params SecretSetParams) {
	var request SecretSetRequestObject

	request.Params = params

	var body SecretSetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SecretSet(ctx, request.(SecretSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SecretSet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SecretSetResponseObject); ok {
		if err := validResponse.VisitSecretSetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SecretGetByID operation middleware
func (sh *strictHandler) SecretGetByID(w http.ResponseWriter, r *http.Request, secretId int32, params SecretGetByIDParams) {
	var request SecretGetByIDRequestObject

	request.SecretId = secretId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SecretGetByID(ctx, request.(SecretGetByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SecretGetByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SecretGetByIDResponseObject); ok {
		if err := validResponse.VisitSecretGetByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXX2/bNhD/KgS3R7V22+xhLvoQO0PntluKOcUeusCgxbPNWCI18tTEC/zdB/6RZJuS",
	"Yw8ZFgx5s8n7f7/7HXVPU5UXSoJEQwf31KRLyJn7OdLAQaJgmf1XaFWARgHuLlMLIe0PDibVokChJB3Q",
	"0oAm/i6hcMfyIgM6oB/UUl4ooAnFdWEPDGohF3ST0IIZc6s0t7Yahfo00tgkVMOfpdDA6eArrXzVCteb",
	"hF4wZHHIMyZX05R5V99rmNMB/a7XZN8Lqfes+pDJ1cjKbhI6E5Lp9VFaXnKT0LSunTlGcbQlvkmogVQD",
	"TnPweQiE/EEzE6dzjqithVA1pjVbb1mULAdrKGpDuPfn93SudM6QDqiQ+OZ10wUhERbgPcAdHpPalZXb",
	"b9t2OLvOr2tfanYDKdLQz7ohUV+XKuOgW7OSZT7ruPrGMsG7b5gF9DRVvK1ce8kEL5XNpIooNtWZXI2w",
	"uvCzNbbOyz5auifz4KidOlUdgV8FEES+ftJa6Tg4qI4P+/dibU49ymPDqQaGwHdKyBnCCxR5ax0FPxLn",
	"nSNzwqyUBT8tOsuj0yND3KudQ2ClH6RDFkldpiak7iI7KokKzcJp29iURwyL06+ku52bE3kv5jzrWMi5",
	"ciEJdGvlF7YCMr4iEzYHcv55bAMBbfzuevWy/7Jv7agCJCsEHdA37sjOAS5dIL16ugplMN5/n+w1gTth",
	"UMgFsW2gzqB2LDDmlQz1VQGDQ8Xd5KdKIkhnkxVFJlKn0bsxSjZ7+aFibK1sV4Dd6FIdWIOoeRVb0xvU",
	"JbhmmUJJ47v9ut+Pk7z8aDkOGAfthCaAL0ZKrQTEshMwtrwkdffkVuCSfPj9iqBagS1Ck1az/M9LXCot",
	"/nIFeDcEpkGTP8p+/016c4tTp+r+wlvymeHyXe8t+RmxuJTZuuXBYOtw1pbHkHESmkCdzKtH64Onv5YW",
	"fJEsZAfubfGDD+zfdTqWCFqyjBjQ30ATCIIJNWWeu80TkOtAYS96GhbCoF+e7Vj/LUgQCbftSK8knsH+",
	"BMH+Yyzzxb7eWaaB8bUnMbOF0dMxFSPEQcs0DL+AFmC9BySZMGgbF2S3ergLMc/+n4RBR9Oa5YCuU1/3",
	"rdpGzHx5G2PCIcW3s1r1uy2JULPdxv3qX7cj6lHQXu3FFqhffnzmr0OgsW/fVgobueeQcfj0Sg8AbQJP",
	"B2ePT6juu7ml/j53wu31PyXR5yV8BIgP4HGbOXv34YtZ8M1BFg02ZmvivgXaEP0ecLgeX8SodpC1D98G",
	"sLXXg2A94oPl/8bNXYPzHxLzWf8sxsSvCslclfLpUfcOUu0z5u8AAAD//zKUlJ2YFAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
